import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes
from bot.config import BotConfig
from bot.helpers import BotHelpers

logger = logging.getLogger(__name__)

class PremiumHandlers:
    def __init__(self):
        self.helpers = BotHelpers()
        self.start_handler = None

    def register(self, application):
        application.add_handler(CommandHandler("premium", self.show_premium_info))
        application.add_handler(
            CallbackQueryHandler(
                self.premium_button_handler,
                pattern="^premium_"
            )
        )

    async def show_premium_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_benefits_click=False):
        """Muestra la informaci√≥n premium con opciones de suscripci√≥n"""
        try:
            buttons = [
                [InlineKeyboardButton("üíé Mensual - $5", callback_data="premium_monthly")],
                [InlineKeyboardButton("üåü Anual - $50 (¬°Ahorra 17%!)", callback_data="premium_yearly")],
                [InlineKeyboardButton("üîç Ver Beneficios", callback_data="premium_benefits")],
                [InlineKeyboardButton("üîô Men√∫ Principal", callback_data="show_main_menu")],
                [InlineKeyboardButton("‚ùå Cerrar", callback_data="premium_close")]
            ]
            
            if is_benefits_click:
                benefits_text = (
                    "üåü *Beneficios Detallados Premium:*\n\n"
                    "üçé *Nutrici√≥n Avanzada:*\n"
                    "- Planes personalizados por nutricionistas\n"
                    "- Base de datos de +10,000 alimentos\n"
                    "- Seguimiento de macros y micronutrientes\n\n"
                    "‚è∞ *Recordatorios Inteligentes:*\n"
                    "- Configuraci√≥n por horarios o eventos\n"
                    "- Recordatorios de medicaci√≥n con inventario\n"
                    "- Integraci√≥n con calendarios\n\n"
                    "üìä *Seguimiento Completo:*\n"
                    "- Gr√°ficos y estad√≠sticas detalladas\n"
                    "- Exportaci√≥n de datos en PDF/Excel\n"
                    "- Comparativas hist√≥ricas\n\n"
                    "üë®‚Äç‚öïÔ∏è *Asesor√≠a Premium:*\n"
                    "- Soporte prioritario 24/7\n"
                    "- Consultas mensuales con expertos\n"
                    "- An√°lisis personalizados\n\n"
                    "üéÅ *Contenido Exclusivo:*\n"
                    "- Recetas premium\n"
                    "- Gu√≠as de entrenamiento\n"
                    "- Webinars mensuales"
                )
            else:
                benefits_text = (
                    "üåü *Beneficios Premium:*\n\n"
                    "‚úÖ Planes de nutrici√≥n avanzados\n"
                    "‚úÖ Recordatorios personalizables\n"
                    "‚úÖ Seguimiento detallado de progreso\n"
                    "‚úÖ Asesor√≠a prioritaria\n"
                    "‚úÖ Contenido exclusivo\n\n"
                    "Selecciona una opci√≥n para m√°s informaci√≥n:"
                )
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=benefits_text,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    text=benefits_text,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error en show_premium_info: {e}")
            await self.helpers.safe_reply(
                update,
                "‚ö†Ô∏è Error al mostrar informaci√≥n premium. Intenta nuevamente."
            )

    async def premium_button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Maneja espec√≠ficamente los botones premium"""
        query = update.callback_query
        await query.answer()
        
        try:
            data = query.data
            
            if data == "premium_monthly":
                await self.show_payment(update, context, "monthly")
            elif data == "premium_yearly":
                await self.show_payment(update, context, "yearly")
            elif data == "premium_benefits":
                # Pasamos is_benefits_click=True para mostrar versi√≥n extendida
                await self.show_premium_info(update, context, is_benefits_click=True)
            elif data == "premium_close":
                await query.delete_message()
            elif data == "show_main_menu":
                if self.start_handler:
                    await self.start_handler.show_main_menu(update, context)
                else:
                    await query.edit_message_text("‚ö†Ô∏è No se puede volver al men√∫ principal")
                    
        except Exception as e:
            logger.error(f"Error en premium_button_handler: {e}")
            await self.helpers.safe_reply(
                update,
                "‚ö†Ô∏è Error al procesar tu solicitud premium."
            )

    async def show_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str):
        """Muestra los detalles de pago para un plan espec√≠fico"""
        try:
            query = update.callback_query
            plans = {
                "monthly": {"price": "$5", "desc": "Mensual", "saving": ""},
                "yearly": {"price": "$50", "desc": "Anual", "saving": " (¬°Ahorra 17%!)"}
            }
            
            payment_text = (
                f"üí≥ *Suscripci√≥n {plans[plan_type]['desc']}*{plans[plan_type]['saving']}\n"
                f"Precio: {plans[plan_type]['price']}\n\n"
                "üîí Pago seguro procesado a trav√©s de nuestro socio de pagos.\n\n"
                "Esta es una simulaci√≥n. En una implementaci√≥n real, aqu√≠ se integrar√≠a "
                "con un sistema de pagos como Stripe o PayPal."
            )
            
            buttons = [
                [InlineKeyboardButton("üîô Volver a Beneficios", callback_data="premium_benefits")],
                [InlineKeyboardButton("üè† Men√∫ Principal", callback_data="show_main_menu")],
                [InlineKeyboardButton("‚ùå Cerrar", callback_data="premium_close")]
            ]
            
            await query.edit_message_text(
                text=payment_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error en show_payment: {e}")
            await self.helpers.safe_reply(
                update,
                "‚ö†Ô∏è Error al mostrar opciones de pago."
            )